{"version":3,"sources":["utils/fetchClient.ts","api/loadData.ts","components/Loader/Loader.tsx","components/PostList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","utils/helper.ts","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getCommentsByPostId","postId","removeComment","commentId","addComment","comment","Loader","className","PostsList","selectedUserId","onSelectPost","selectedPost","useState","posts","setPosts","isError","setIsError","isLoading","setIsLoading","hasNoPosts","length","loadPosts","a","loadedPosts","useEffect","map","post","isSelectedPost","id","title","type","onClick","NewCommentForm","onAddComment","name","setName","isNameError","setIsNameError","email","setEmail","isEmailError","setIsEmailError","commentBody","setCommentBody","isCommentBodyError","setIsCommentBodyError","isCommentLoading","setIsCommentLoading","handleFormSubmit","event","preventDefault","trim","onSubmit","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","comments","setComments","isReadyToAddComment","setIsReadyToAddComment","hasNoComments","loadComments","loadedComments","handleRemoveComment","currentComments","filter","handleAddcomment","newComment","addedComment","isAddButtonVisible","isCommentsVisible","isNoComments","href","UserSelector","onSelectUser","users","setUsers","isOpen","setIsOpen","loadUsers","loadedUsers","selectedUser","userId","find","user","getUserById","prevState","role","App","setSelectedUserId","setSelectedPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8060ad74.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPostsByUserId = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getCommentsByPostId = (postId = 0) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getPostsByUserId } from '../../api/loadData';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedUserId: number,\n  onSelectPost: (post: Post | null) => void,\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  onSelectPost,\n  selectedPost,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hasNoPosts = posts.length === 0;\n\n  const loadPosts = async () => {\n    setIsLoading(true);\n\n    try {\n      const loadedPosts = await getPostsByUserId(selectedUserId);\n\n      setPosts(loadedPosts);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  if (isLoading && selectedUserId !== 0) {\n    return <Loader />;\n  }\n\n  if (isError) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  }\n\n  if (hasNoPosts && !isLoading && selectedUserId) {\n    return (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      {(!isLoading && !!selectedUserId) && (\n        <>\n          <p className=\"title\">Posts:</p>\n\n          <table\n            className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n          >\n            <thead>\n              <tr className=\"has-background-link-light\">\n                <th>#</th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {posts.map(post => {\n                const isSelectedPost = post.id === selectedPost?.id;\n\n                return (\n                  <tr data-cy=\"Post\" key={post.id}>\n                    <td data-cy=\"PostId\">{post.id}</td>\n\n                    <td data-cy=\"PostTitle\">\n                      {post.title}\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      {isSelectedPost\n                        ? (\n                          <button\n                            type=\"button\"\n                            data-cy=\"PostButton\"\n                            className=\"button is-link\"\n                            onClick={() => onSelectPost(null)}\n                          >\n                            Close\n                          </button>\n                        ) : (\n                          <button\n                            type=\"button\"\n                            data-cy=\"PostButton\"\n                            className=\"button is-link is-light\"\n                            onClick={() => onSelectPost(post)}\n                          >\n                            Open\n                          </button>\n                        )}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </>\n      )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../../types/Comment';\n\ntype Props = {\n  onAddComment: (comment: CommentData) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAddComment }) => {\n  const [name, setName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [commentBody, setCommentBody] = useState('');\n  const [isCommentBodyError, setIsCommentBodyError] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n\n  const handleResetButton = () => {\n    setName('');\n    setEmail('');\n    setCommentBody('');\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsCommentBodyError(false);\n  };\n\n  const handleFormError = () => {\n    if (name.trim().length === 0) {\n      setIsNameError(true);\n    }\n\n    if (email.trim().length === 0) {\n      setIsEmailError(true);\n    }\n\n    if (commentBody.trim().length === 0) {\n      setIsCommentBodyError(true);\n    }\n  };\n\n  const handleFormSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    handleFormError();\n\n    if (name && email && commentBody) {\n      try {\n        setIsCommentLoading(true);\n        await onAddComment({\n          name,\n          email,\n          body: commentBody,\n        });\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsCommentLoading(false);\n      }\n    }\n\n    setCommentBody('');\n  };\n\n  if (isError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n        Something went wrong\n      </div>\n    );\n  }\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': isNameError })}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n              setIsNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': isEmailError })}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setIsEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isCommentBodyError },\n            )}\n            value={commentBody}\n            onChange={(event) => {\n              setCommentBody(event.target.value);\n              setIsCommentBodyError(false);\n            }}\n          />\n        </div>\n\n        {isCommentBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isCommentLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleResetButton}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport { Comment, CommentData } from '../../types/Comment';\nimport {\n  addComment,\n  getCommentsByPostId,\n  removeComment,\n} from '../../api/loadData';\n\ntype Props = {\n  post: Post | null,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isReadyToAddComment, setIsReadyToAddComment] = useState(false);\n\n  const hasNoComments = comments.length === 0;\n\n  const loadComments = async () => {\n    setIsLoading(true);\n\n    try {\n      const loadedComments = await getCommentsByPostId(post?.id);\n\n      setComments(loadedComments);\n      setIsLoading(false);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  useEffect(() => {\n    setComments([]);\n    loadComments();\n    setIsReadyToAddComment(false);\n  }, [post?.id]);\n\n  if (isError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n        Something went wrong\n      </div>\n    );\n  }\n\n  const handleRemoveComment = async (commentId: number) => {\n    setComments(currentComments => (\n      currentComments.filter(comment => comment.id !== commentId)\n    ));\n\n    try {\n      await removeComment(commentId);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  const handleAddcomment = async (comment: CommentData) => {\n    const newComment = {\n      postId: 0,\n      ...comment,\n    };\n\n    try {\n      const addedComment = await addComment(newComment);\n\n      setComments(currentComments => [...currentComments, addedComment]);\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  const isAddButtonVisible = (!isLoading && !isReadyToAddComment);\n  const isCommentsVisible = (!hasNoComments && !isLoading);\n  const isNoComments = (hasNoComments && !isLoading);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id} ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {isNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isCommentsVisible && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleRemoveComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {isAddButtonVisible && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsReadyToAddComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isReadyToAddComment && (\n          <NewCommentForm onAddComment={handleAddcomment} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUsers } from '../../api/loadData';\nimport { User } from '../../types/User';\nimport { getUserById } from '../../utils/helper';\n\ntype Props = {\n  onSelectUser: (userIda: number) => void;\n  selectedUserId: number;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  onSelectUser,\n  selectedUserId,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const selectedUser = getUserById(users, selectedUserId);\n\n  const handleDropMenu = () => {\n    setIsOpen(prevState => !prevState);\n  };\n\n  if (isError) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  }\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isOpen })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropMenu}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          {users.length > 0 && (\n            <div className=\"dropdown-content\">\n              {users.map((user: User) => (\n                <a\n                  key={user.name}\n                  href={`#user-${user.id}`}\n                  className={classNames(\n                    'dropdown-item',\n                    { 'is-active': selectedUserId === user.id },\n                  )}\n                  onClick={() => {\n                    onSelectUser(user.id);\n                    setIsOpen(false);\n                  }}\n                >\n                  {user.name}\n                </a>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { User } from '../types/User';\n\nexport const getUserById = (users: User[], userId: number): User | null => {\n  const foundedUser = users.find(user => user.id === userId) || null;\n\n  return foundedUser;\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostList/PostsList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  const selectPost = (post: Post | null) => {\n    setSelectedPost(post);\n  };\n\n  useEffect(() => {\n    setSelectedPost(null);\n  }, [selectedUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  onSelectUser={selectUser}\n                  selectedUserId={selectedUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUserId === 0\n                  ? (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  ) : (\n                    <PostsList\n                      selectedUserId={selectedUserId}\n                      onSelectPost={selectPost}\n                      selectedPost={selectedPost}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}